#!/bin/bash

# Alias copy
function acp()
{
    # Print help
    if [[ -z $1 || $1 == "-h" || $1 == "--help" ]]; then                                                   
        echo "Alias Copy: a cp wrapper. Copy a file to a directory set by an alias or by bm."
        echo ""
        echo "Usage:  acp SOURCE ALIAS"
        echo "Commands/Options:"
        echo "  SOURCE          A file or folder."
        echo "  ALIAS           An alias containing the path to the target directory."
        echo ""
        echo "  --list | -l     List all currently available bookmark aliases, including any pre-defined bash aliases."
        echo "  --help | -h     Print this help statement."
        return;
    fi

    # Match this alias to its string and infer a path
    target="${@: -1}"
    command alias $target 
    if [ "$?" -eq 0 ]; then
        alias_str=$(alias $target)
        contains_path=$(echo $alias_str | cut -d "/" -f2-)  # TODO: Make generic to any line containing a path
        target=/$(echo $contains_path | cut -d " " -f1 | cut -d"'" -f 1)
    fi

    # Expand globs and evaluate copy command
    target_stat="$(stat -L -c %d:%i $target)"
    for file in "${@:1:$#-1}"; do
        source_stat="$(stat -L -c %d:%i $file)"
        if [ $source_stat != $target_stat ]; then
            cp $file $target
        fi
    done

}


# Bookmark
function bm() {
    # Set variables
    a1=$1
    RED=$(tput setaf 1)
    CYAN=$(tput setaf 6)

    # Print help
    if [[ -z $1 || $a1 == "-h" || $a1 == "--help" ]]; then                                                   
        echo "BookMark: an alias wrapper. Create a temporary bookmark for a directory. After usage, type bookmark name to go to that directory."
        echo ""
        echo "Usage:  bm name [directory][-l|-h]"
        echo "commands/options:"
        echo "  name            A string to use to cd into the target directory."
        echo "  directory       A path to a directory for the bookmark to cd into. Defaults to current directory."
        echo ""
        echo "  --list | -l     List all currently available bookmark aliases, including any pre-defined bash aliases."
        echo "  --help | -h     Print this help statement."
        return;
    fi

    # Print version
    if [[ -z $1 || $a1 == "-v" || $a1 == "--version" ]]; then                                                   
        echo "0.0.1"
        return;   
    fi

    # List current bookmarks
    IFS=$'\n'
    if [[ -z $1 || $a1 == "-l" || $a1 == "--list" ]]; then
        echo Available Bookmarks:
        empty=''
        home='~'
        for i in $(alias | sort -r); do
            if [[ "$i" == *"='cd "* ]]; then
                bookmark="${i/alias/$empty}"
                bookmark="${bookmark/cd /$empty}"
                bookmark="${bookmark/$home/$HOME}"
                echo "  ${CYAN}${bookmark}"
            fi
        done
        tput sgr0
        return;       
    fi

    # Check the bookmark name doesn't start with a "-"
    if [[ ${a1:0:1} == "-" ]] ; then
        echo "${RED}Error: Cannot use '-' as first the character, use a different name."
        tput sgr0
        return;
    fi

    # Check that the target directory exists
    if [[ $# -eq 2 ]]; then
        if [[ ! -d $2 ]]; then
            echo "${RED}No directory named $2."
            tput sgr0
            return;
        fi
    fi

    # Check if alias exists as variable or command already.
    check=$($a1 2>&1)
    if [[ ${check} != *"command not found"* ]]; then
        echo "${RED}Error: '$a1' is already assigned, use a different name."
        tput sgr0
	return;
    fi

    # Assign directory 
    if [[ -z "$2" || $2 == "." ]]; then
        d=$(pwd)
    else
        d=$2
    fi

    # Assign alias
    alias $1="cd $d"

    # Signal success
    echo "${CYAN}Alias '$1' assigned to '$d'."
    tput sgr0
}


# Python Code
function pcode()
{
    # If two argument, one might be "close" option, as in keep file closed
    path=$1
    if [ $# -eq 2 ]; then
        if [[ ${1:0:1} == "-" ]]; then
            op=$1
            path=$2
        else
            op=$2
            path=$1
        fi
    fi

    # Create the file
    touch $path;
    cat > $path << EOL
# -*- coding: utf-8 -*-
"""Module Name.

Author: $USER
Date: $(date)
"""
from pathlib import Path


HOME = Path("$PWD")


class ATemplate:
    """A docstring."""

    def __init__(self):
        """Initialize an ATemplate object."""

    def __repr__(self):
        """Return an ATemplate object representation string."""
        address = hex(id(self))
        msgs = [f"\n   {k}={v}" for k, v in self.__dict__.items()]
        msg = ", ".join(msgs)
        return f"<ATemplate object at {address}>: {msg}"


def main():
    """A docstring."""


if __name__ == "__main__":
    pass
EOL

    # If close option is given, don't open it
    if [ $# -eq 2 ]; then
        if [[ $op = "-c" ]]; then
            return
        fi
    fi

    # Open file in VScode
    if [ "$(type -t code)" = "file" ]; then
        code $path
    fi
}


# Print python versions (because the stupid devs removed pip install x==)
function pipv() {
    if [[ -z $1 || $a1 == "-h" || $a1 == "--help" ]]; then                                                   
        echo "Pip Versions: Print available versions for a Python package."
        echo ""
        echo "Usage:  pipv <package>"
        echo "Commands/Options:"
        echo "  --help | -h     Print this help statement."
        return;
    fi

    url="https://pypi.org/pypi/${1}/json"
    echo $url
    if curl --output /dev/null --silent --head --fail "$url"; then
        out=$(curl -L -s $url \
                | jq  -r '.releases | keys | .[]' \
                | sort -V)
        echo $out
    else
        echo "Cannot find package for '$1', '$url' does not exist."
    fi
}


# Python package
function ppackage()
{
    # Make sure the user doesn't accidentally add a trailing slash
    name=$1
    if [[ ${name: -1} == "/" ]]; then
        name=${name:0:-1}
    fi

    # Make package directories
    mkdir -p $name
    mkdir -p $name/tests/
    mkdir -p $name/$name

    # Make init, data, and a template package file
    touch $name/$name/__init__.py
    mkdir -p $name/$name/data
    pcode -c $name/$name/templates.py

    # Make .gitignore, tests, etc
    touch $name/README.md
    echo "${name} Package" >> $name/README.md
    curl -Os https://raw.githubusercontent.com/github/gitignore/main/Python.gitignore
    mv Python.gitignore $name/.gitignore
    touch $name/requirements.txt

    # Make template setup script
    path=$name/setup.py
    touch $path
    cat > $path << EOL
# -*- coding: utf-8 -*-
"""Module Name.

Author: $USER
Date: $(date)
"""
import os

from setuptools import setup


REPO_DIR = os.path.abspath(os.path.dirname(__file__))
VERSION_FILE = os.path.join(REPO_DIR, "$1", "version.py")
DESCRIPTION = "A description of the package."


with open(os.path.join(REPO_DIR, "README.md"), encoding="utf-8") as f:
    README = f.read()

with open("requirements.txt") as f:
    REQUIREMENTS = f.read().splitlines()


setup(
    name="$name",
    version="0.0.1",
    description=DESCRIPTION,
    long_description=README,
    author="Travis Williams",
    author_email="Travis.Williams@nrel.gov",
    packages=["$name"],
    zip_safe=False,
    keywords="$name",
    python_requires=">=3.9",
    classifiers=[
        "Development Status :: 3 - Alpha",
        "Intended Audience :: Science/Research",
        "Natural Language :: English",
        "Programming Language :: Python :: 3.9",
    ],
    test_suite="tests",
    include_package_data=True,
    package_data={"data": ["*"]},
    install_requires=REQUIREMENTS
)
EOL

    # Print that it worked
    echo "'$name' python project built."

}

# Pattern Cancel (SLURM)
function pcancel {
    squeue -u $USER --format='%.18i %.100j' | grep $1 | awk '{print $1}' | xargs -n 1 scancel
}


# Rename
function rename {
  from=$1;
  to=$2;
  shift 2;
  for i in "$@";
    do j=`echo $i | sed "s/$from/$to/"`;
     mv "$i" "$j";
   done
}


# Export functions
export -f bm
export -f pcode
export -f pcancel
export -f rename
